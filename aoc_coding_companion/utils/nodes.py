from pathlib import Path
from datetime import datetime

from langchain_core.messages import ToolMessage
from langchain_core.runnables.config import RunnableConfig

from aoc_coding_companion.utils.state import AOCState
from aoc_coding_companion.utils.tools import run_python_code
from aoc_coding_companion.utils.prompts import developer_prompt
from aoc_coding_companion.utils.models import PythonREPL, TaskAnswer
from aoc_coding_companion.utils.utils import (
    get_model_by_config,
    get_logger_by_config,
    get_parser_by_config,
    get_leaderboard_id_by_config,
    send_telegram_message_by_config
)


async def start_alert(_, config: RunnableConfig):
    logger = get_logger_by_config(config)
    logger.debug('–í—Ö–æ–¥ —É–∑–ª–∞ –æ–ø–æ–≤–µ—â–µ–Ω–∏–µ –æ —Å—Ç–∞—Ä—Ç–µ —Ä–∞–±–æ—Ç—ã')
    comment = f'–û–æ–æ–æ –ø—Ä–∏–≤–µ—Ç! –ï—Ä–∂–∞–Ω üôà –ø—Ä–æ—Å–Ω—É–ª—Å—è –∏ –Ω–∞—á–∞–ª —Ä–∞–±–æ—Ç—É.\n–í—Ä–µ–º—è {datetime.now()}'
    send_telegram_message_by_config(comment, config)

    return {'comment': comment}

start_alert.__name__ = '–û–ø–æ–≤–µ—â–µ–Ω–∏–µ –æ —Å—Ç–∞—Ä—Ç–µ —Ä–∞–±–æ—Ç—ã üöÄ'


async def check_leader_board(_, config: RunnableConfig):
    logger = get_logger_by_config(config)
    logger.debug('–í—Ö–æ–¥ —É–∑–ª–∞ –ø—Ä–æ–≤–µ—Ä–∫–∏ –ª–∏–¥–µ—Ä–±–æ—Ä–¥–∞')
    leaderboard_id = get_leaderboard_id_by_config(config)
    try:
        async with get_parser_by_config(config) as parser:
            leaderboard_result = await parser.parse_leaderboard(leaderboard_id)
        logger.debug(f'–†–µ–∑—É–ª—å—Ç–∞—Ç –ø—Ä–æ–≤–µ—Ä–∫–∏ –ª–∏–¥–µ—Ä–±–æ—Ä–¥–∞: {leaderboard_result}')
        comment = (
            f'<–ü–†–û–í–ï–†–ö–ê –õ–ò–î–ï–†–ë–û–†–î–ê>: '
            f'–¢–≤–æ–µ –º–µ—Å—Ç–æ - {leaderboard_result.my_position} —Å –æ—á–∫–∞–º–∏ - {leaderboard_result.my_points}'
        )
    except Exception as e:
        comment = f'–ù–µ —É–¥–∞–ª–æ—Å—å –ø–æ–ª—É—á–∏—Ç—å —Ä–µ–∑—É–ª—å—Ç–∞—Ç –ø—Ä–æ–≤–µ—Ä–∫–∏ –ª–∏–¥–µ—Ä–±–æ—Ä–¥–∞: {e}'
    send_telegram_message_by_config(comment, config)

    return {'comment': comment}

check_leader_board.__name__ = '–ü—Ä–æ–≤–µ—Ä–∫–∞ —Å–ø–∏—Å–∫–∞ –ª–∏–¥–µ—Ä–æ–≤ üìä'


async def search_unsolved_puzzles(_, config: RunnableConfig):
    logger = get_logger_by_config(config)
    logger.debug('–í—Ö–æ–¥ —É–∑–ª–∞ –ø–æ–∏—Å–∫–∞ –Ω–µ—Ä–µ—à–µ–Ω–Ω—ã—Ö –∑–∞–¥–∞—á')
    async with get_parser_by_config(config) as parser:
        calendar = await parser.parse_calendar()
    logger.debug(calendar)
    comment = (
        f'–ö–æ–ª–∏—á–µ—Å—Ç–≤–æ –Ω–µ—Ä–µ—à–µ–Ω–Ω—ã—Ö –∑–∞–¥–∞—á: {len(calendar.released.unsolved)} '
        f'–∏ —á–∞—Å—Ç–∏—á–Ω–æ –Ω–µ —Ä–µ—à–µ–Ω–Ω—ã—Ö –∑–∞–¥–∞—á {len(calendar.released.partially_solved)}'
    )
    send_telegram_message_by_config(comment, config)
    todo_puzzle_links = list(calendar.released.partially_solved.values()) + list(calendar.released.unsolved.values())
    return {'todo_puzzle_links': todo_puzzle_links, 'comment': comment}

search_unsolved_puzzles.__name__ = '–ü–æ–∏—Å–∫ –Ω–µ—Ä–µ—à–µ–Ω–Ω—ã—Ö –∑–∞–¥–∞—á üîé'


async def get_puzzle(state: AOCState, config: RunnableConfig):
    logger = get_logger_by_config(config)
    logger.debug('–í—Ö–æ–¥ —É–∑–ª–∞ —Ä–∞—Å–ø–æ–∑–Ω–∞–≤–∞–Ω–∏—è –∑–∞–¥–∞—á–∏ –∏ —É—Å–ª–æ–≤–∏–π')
    todo_puzzle_links = state['todo_puzzle_links']
    todo_puzzle_link = todo_puzzle_links.pop(0)
    async with get_parser_by_config(config) as parser:
        current_puzzle_details = await parser.parse_puzzle_details(todo_puzzle_link)
    comment = (
        f'–í–∑—è—Ç–æ –≤ —Ä–∞–±–æ—Ç—É:\n{current_puzzle_details}'
    )
    send_telegram_message_by_config(comment, config)
    return {
        'todo_puzzle_links': todo_puzzle_links,
        'current_puzzle_details': current_puzzle_details,
        'comment': comment,
        'messages': []
    }

get_puzzle.__name__ = '–í–∑—è—Ç–∏–µ –∑–∞–¥–∞—á–∏ üëÄ'


async def download_input(state: AOCState, config: RunnableConfig):
    logger = get_logger_by_config(config)
    logger.debug('–í—Ö–æ–¥ —Å–∫–∞—á–∏–≤–∞–Ω–∏—è —Ñ–∞–π–ª–∞ —Å –≤—Ö–æ–¥–Ω—ã–º–∏ –¥–∞–Ω–Ω—ã–º–∏')
    working_dir = Path(config['configurable'].get('working_dir', './tmp_work_dir')).resolve()
    working_dir.mkdir(parents=True, exist_ok=True)
    current_puzzle_details = state['current_puzzle_details']
    input_filepath = working_dir / f'INPUT({current_puzzle_details.name}).txt'
    async with get_parser_by_config(config) as parser:
        await parser.download_input(current_puzzle_details.input_link, input_filepath)
    comment = (
        f'–°–∫–∞—á–µ–Ω—ã –≤—Ö–æ–¥–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ –≤ —Ñ–∞–π–ª {input_filepath}'
    )
    send_telegram_message_by_config(comment, config)
    return {'input_filepath': input_filepath, 'comment': comment}

download_input.__name__ = '–°–∫–∞—á–∏–≤–∞–Ω–∏–µ –≤—Ö–æ–¥–Ω—ã—Ö –¥–∞–Ω–Ω—ã—Ö ‚è≥'


GET_PUZZLE_ROUTE_NAME = '–ó–∞–¥–∞—á–∏ –¥–ª—è —Ä–µ—à–µ–Ω–∏—è –µ—â–µ –µ—Å—Ç—å'
ALL_DONE_ROUTE_NAME = '–í—Å–µ –∑–∞–¥–∞—á–∏ –∏–∑ TODO –ª–∏—Å—Ç–∞ –≤—ã–ø–æ–ª–Ω–µ–Ω—ã'


async def route_have_puzzles(state: AOCState, config: RunnableConfig):
    logger = get_logger_by_config(config)
    logger.debug('–í—Ö–æ–¥ –≤—ã–±–æ—Ä–∞ —Å–ª–µ–¥—É—é—â–µ–≥–æ —É–∑–ª–∞ –ø–æ –ø–∞—Ä—Å–∏–Ω–≥—É –∑–∞–¥–∞—á–∏')
    todo_puzzle_links = state.get("todo_puzzle_links", [])
    if len(todo_puzzle_links) > 0:
        return GET_PUZZLE_ROUTE_NAME
    return ALL_DONE_ROUTE_NAME


async def write_code(state: AOCState, config: RunnableConfig):
    logger = get_logger_by_config(config)
    logger.debug('–í—Ö–æ–¥ —É–∑–ª–∞ –ø—Ä–æ–≥—Ä–∞–º–º–∏—Å—Ç–∞')
    llm = get_model_by_config(config)

    messages = state.get('messages', [])
    if len(messages) == 0:
        tool_choice = PythonREPL.__name__
    else:
        tool_choice = True
    chain = developer_prompt | llm.bind_tools([PythonREPL, TaskAnswer], tool_choice=tool_choice)

    result = await chain.ainvoke(
        {
            'input_filepath': state['input_filepath'],
            'task_description': state['current_puzzle_details'].description,
            'question': state['current_puzzle_details'].question,
            'messages': messages
        }
    )
    messages.append(result)

    if result.tool_calls[0]['name'] == PythonREPL.__name__:
        code = result.tool_calls[0]['args']['query']
        comment = f'–ù–∞–ø–∏—Å–∞–Ω –∫–æ–¥:\n```python\n{code}\n```'
    else:
        answer = result.tool_calls[0]['args']['answer']
        comment = f'–î–∞–Ω —Ñ–∏–Ω–∞–ª—å–Ω—ã–π –æ—Ç–≤–µ—Ç –Ω–∞ –∑–∞–¥–∞—á—É: {answer}'
    return {'messages': messages, 'comment': comment}


write_code.__name__ = '–ü—Ä–æ–≥—Ä–∞–º–º–∏—Å—Ç üë®üèª‚Äçüíª'


async def exec_code(state: AOCState, config: RunnableConfig):
    logger = get_logger_by_config(config)
    logger.debug('–í—Ö–æ–¥ —É–∑–ª–∞ –∑–∞–ø—É—Å–∫–∞ –∫–æ–¥–∞')
    tool_calls = state["messages"][-1].tool_calls
    if len(tool_calls) != 1:
        raise ValueError(f'–í—ã–∑–æ–≤–æ–≤ –∏–Ω—Å—Ç—Ä—É–º–µ–Ω—Ç–∞ –±–æ–ª–µ–µ 1.\n{tool_calls}')
    tool_call = tool_calls[0]
    if tool_call['name'] != PythonREPL.__name__:
        raise ValueError(f'–í—ã–∑—ã–≤–∞—é—Ç –Ω–µ –∏–Ω—Å—Ç—Ä—É–º–µ–Ω—Ç –ø–æ –∏—Å–ø–æ–ª–Ω–µ–Ω–∏—é –∫–æ–¥–∞ {PythonREPL.__name__}.\n{tool_call}')
    code_output = run_python_code(code=tool_call['args']['query']).strip(' \n')
    state['messages'].append(ToolMessage(content=code_output, tool_call_id=tool_call['id']))
    comment = f'–†–µ–∑—É–ª—å—Ç–∞—Ç –≤—ã–ø–æ–ª–Ω–µ–Ω–∏—è –∫–æ–¥–∞: "{code_output}"'
    send_telegram_message_by_config(comment, config)
    return {"messages": state['messages'], 'comment': comment}


exec_code.__name__ = '–ó–∞–ø—É—Å–∫ –∫–æ–¥–∞ üöÄ'


EXEC_CODE_ROUTE_NAME = '–¢—Ä–µ–±—É–µ—Ç—Å—è –∑–∞–ø—É—Å–∫ –∫–æ–¥–∞'
FIND_ANSWER_ROUTE_NAME = '–ü–æ–ª—É—á–µ–Ω —Ñ–∏–Ω–∞–ª—å–Ω—ã–π –æ—Ç–≤–µ—Ç'


async def route_exec_code(state: AOCState, config: RunnableConfig):
    logger = get_logger_by_config(config)
    logger.debug('–í—Ö–æ–¥ –≤—ã–±–æ—Ä–∞ —Å–ª–µ–¥—É—é—â–µ–≥–æ —É–∑–ª–∞ –ø–æ –∑–∞–ø—É—Å–∫—É –∫–æ–¥–∞')
    tool_calls = state["messages"][-1].tool_calls
    if len(tool_calls) == 1 and tool_calls[0]['name'] == PythonREPL.__name__:
        return EXEC_CODE_ROUTE_NAME
    return FIND_ANSWER_ROUTE_NAME


async def answer_submit(state: AOCState, config: RunnableConfig):
    logger = get_logger_by_config(config)
    logger.debug('–í—Ö–æ–¥ —É–∑–ª–∞ –æ—Ç–ø—Ä–∞–≤–∫–∏ –æ—Ç–≤–µ—Ç–∞')

    all_tool_call_answer = [message.tool_calls[0] for message in state['messages']
                            if hasattr(message, 'tool_calls') and
                            len(message.tool_calls) == 1 and
                            message.tool_calls[0]['name'] == TaskAnswer.__name__]
    answers = [tool_call['args']['answer'].strip(' \n') for tool_call in all_tool_call_answer]
    submit_answer = answers.pop(-1)

    # –ï—Å–ª–∏ —Ç–∞–∫–æ–π –æ—Ç–≤–µ—Ç —Ä–∞–Ω–µ–µ –±—ã–ª
    if submit_answer in answers:
        comment = f'–î–∞–Ω–Ω—ã–π –æ—Ç–≤–µ—Ç —É–∂–µ —Ä–∞–Ω–µ–µ –æ—Ç–≤–µ—á–∞–ª—Å—è –∏ –±—ã–ª –Ω–µ–≤–µ—Ä–Ω—ã–º'
        state['messages'].append(
            ToolMessage(
                content=f'The answer is incorrect. You have already answered "{submit_answer}" before. '
                        f'DO NOT REPEAT IT. '
                        f'Reread the terms carefully and try to find the mistake.',
                tool_call_id=all_tool_call_answer[-1]['id']
            )
        )
        return {'messages': state['messages'], 'comment': comment}

    # –û—Ç–ø—Ä–∞–≤–∫–∞ –æ—Ç–≤–µ—Ç–∞
    async with get_parser_by_config(config) as parser:
        result = await parser.submit_answer(
            state['current_puzzle_details'].submit_url,
            state['current_puzzle_details'].level,
            submit_answer
        )

    # –ï—Å–ª–∏ –æ—Ç–≤–µ—Ç –≤–µ—Ä–Ω—ã–π
    if result.is_correct:
        comment = f'–û—Ç–≤–µ—Ç "{submit_answer}" –≤–µ—Ä–Ω—ã–π!\n{result.full_text}'
        send_telegram_message_by_config(comment, config)
        return {'comment': comment}

    # –ï—Å–ª–∏ –æ—Ç–≤–µ—Ç –Ω–µ–≤–µ—Ä–Ω—ã–π
    comment = f'–û—Ç–≤–µ—Ç "{submit_answer}" –Ω–µ–≤–µ—Ä–Ω—ã–π!\n{result.full_text}'
    state['messages'].append(
        ToolMessage(
            content='The answer is incorrect. '
                    'There is an error somewhere, read the condition again and rewrite the code',
            tool_call_id=all_tool_call_answer[-1]['id']
        )
    )
    send_telegram_message_by_config(comment, config)
    return {'messages': state['messages'], 'comment': comment}


answer_submit.__name__ = '–û—Ç–ø—Ä–∞–≤–∫–∞ –æ—Ç–≤–µ—Ç–∞ üíå'


RETRY_ROUTE_NAME = '–û—Ç–≤–µ—Ç –Ω–µ–≤–µ—Ä–Ω—ã–π, –ø—Ä–æ–±—É–µ–º –µ—â–µ'
ANSWER_CORRECTNESS_ROUTE_NAME = '–û—Ç–≤–µ—Ç –≤–µ—Ä–Ω—ã–π!'


async def route_answer_correctness(state: AOCState, config: RunnableConfig):
    logger = get_logger_by_config(config)
    logger.debug('–í—Ö–æ–¥ –≤—ã–±–æ—Ä–∞ —Å–ª–µ–¥—É—é—â–µ–≥–æ —É–∑–ª–∞ –ø–æ –ø—Ä–∞–≤–∏–ª—å–Ω–æ—Å—Ç–∏ –æ—Ç–≤–µ—Ç–∞')

    if isinstance(state['messages'][-1], ToolMessage):
        return RETRY_ROUTE_NAME
    return ' | '.join([ANSWER_CORRECTNESS_ROUTE_NAME, route_have_puzzles(state, config)])


async def end_alert(_, config: RunnableConfig):
    logger = get_logger_by_config(config)
    logger.debug('–í—Ö–æ–¥ —É–∑–ª–∞ –æ–ø–æ–≤–µ—â–µ–Ω–∏–µ –æ –∑–∞–≤–µ—Ä—à–µ–Ω–∏–∏ —Ä–∞–±–æ—Ç—ã')
    comment = f'–Ø –∑–∞–∫–æ–Ω—á–∏—Ç—å, –Ω–∞—á–∞–ª—å–Ω–∏–∫–∞!\n–í—Ä–µ–º—è {datetime.now()}'
    send_telegram_message_by_config(comment, config)

    return {'comment': comment}

end_alert.__name__ = '–û–ø–æ–≤–µ—â–µ–Ω–∏–µ –æ –∫–æ–Ω—Ü–µ —Ä–∞–±–æ—Ç—ã üèÅ'
